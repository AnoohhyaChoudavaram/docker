Docker Installation

curl -ssl https://get.docker.com | sh
sudo usermod -aG docker ubuntu
exit
	re login by accessing SSH URL
docker –version
docker info


To deploy application in a container we write our own Dockerfile

Dockerfile -- Default name of the Dockerfile

Dockerfile is a simple text file with key and va;ues separated by space
it uses DSL (Domain Specific Language)

1. Identify the software needed to run your application
	Java and Tomcat
2. Your Application package should be ready
	java-tomcat-maven-example.war
3. Port number to run your application
	8080
4. Command to start your application


scp -i "MyNCKeys.pem" java-tomcat-maven-example.war ubuntu@ec2-54-177-23-69.us-west-1.compute.amazonaws.com:/home/ubuntu

vi Dockerfile

FROM tomcat:8.0-jre8
LABEL maintainer="Srinivas <skatta3@yahoo.com>" \
      version="1.0"
ADD java-tomcat-maven-example.war /usr/local/tomcat/webapps/java-tomcat-maven-example.war
EXPOSE 8080
CMD ["catalina.sh","run"]

Build Docker Image

docker build -t myjavatomcat:1.0 .

docker build -t myjavatomcat:1.0 -f <CustomDockerfile> .

docker run -d -p 8080:8080 myjavatomcat:1.0

http://<PublicIP>:8080/java-tomcat-maven-example

Push to Docker Hub

	docker login docker.io

	docker image tag <ImageName> <DockerID>/<TagName>

	docker push <DockerID>/<TagName>




To remove all Docker Containers
docker rm -f $(docker ps -a -q)


To remove all Docker Images
docker rmi -f $(docker images -a -q)


Docker Compose

sudo apt install docker-compose -y
docker-compose --version

nano docker-compose.yaml
version: "3"
services:
    web:
      image: nginx
      ports:
        - "80:80"
    database:
      image: redis
    helloworld:
      image: hello-world

docker-compose up -d

docker-compose up -d --scale database=3

Assignment1

Github Repository: https://github.com/spring-projects/spring-petclinic.git
1. Clone it
2. Execute with Maven so that we get the package (jar format)
3. Software needed is Java 
4. Upload teh package to EC2 Instance
5. Craete Dockerfile
6. Craete Docker Image
7. Run the Container
8. Optionally Publish the image

Assignment 2
Uisng Traditional way dowload tomcat into Container and start it




Docker Swarm (is a Cluster)
Docker Swarm is a Cluster Management to distribute the containers across nodes for High availability

Desired State

I started 3 Containers
if Actual state is < desired State


Create 1 Ubuntu EC2 Instance for Swarm manager and 2 or more Ubuntu EC2 Instances for Worker Nodes
Install Docker on all the Instances

•	curl -sSL https://get.docker.com/ | sh
•	sudo usermod -aG docker ubuntu
•	Logout and login back
•	Execute docker info or docker --version

Execute below command on Swarm Manager
docker swarm init 

it returns the command to be executed in a node server to join that node into Swarm manager(Leader)

Join as a worker node
To retrieve the join command including the join token for worker nodes, run the following command on a manager node:

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-2hsi9pubv4ttbmmulhnvdg3arlio1iiknxrggvpiv05q8tkp16-67x5yz7fy621zaw4kvcjno7we 172.31.92.73:2377 (You have to copy this command from Swarm manager after you executed docker swarm init)

Add 2377 port to Security Group before you add worker nodes to Swarm Manager

docker node ls  -- on Manager node to see the status of Manager and Worker


Execute the following command to deploy jenkins


docker service create --name jenkins --replicas 2 --publish published=8080,target=8080 bitnami/jenkins

To see the status of containers craeted execute below command
docker service ps jenkins

Now navigate to ipaddress of any node and access it from browser
http://<nodip>:8080

Scale up/down the number of containers

docker service scale jenkins=4

Now lets try to update to the newer version of jenkins
docker service update --image jenkins:latest jenkins

To Stop the Service and Remove all the containers execute below command

docker service rm jenkins

docker swarm leave --force


Docker Volumes














Docker is to create a containers from one image at a time

1. docker images -- To List down the docker images

2. docker image inspect <ImageID> -- Gives complete details of the Image
   docker container inspect <ContainerID> -- Gives complete details of the Container

3. docker ps -- Lists the active docker containers

4. docker ps -a -- to list all the containers (active and inactive)

5. docker stop <ContainerID> -- To Stop the running Container

6. docker start <ContainerID> -- To Start the Container

7. docker rm <ContainerID> -- To remove the container

8. docker rm -f <ContainerID> -- To remove the container forcefully

9. docker build -t <ImageName>:<version> .   -- To Build Docker image with Default Dockerfile

10. docker build -t <ImageName> -f Test/mydockerfile .  -- To Build Docker image with Custom Dockerfile

11. docker run -d -p 8080:8080 <ImageID:Version> -- Create the Container (Pull+Create)

12. docker run --name mycontainer  -d -p 8081:8080 myapp:1.0

13. docker container ls --> List of the active/running Containers

14. docker container logs <ContainerID>

15. docker run -it <ImageName> /bin/bash -- Creates the Container from the Image and logs you into the Container

16. docker exec -it <containerID> /bin/bash -- Login to the Container at any point of time

17. docker pull myregistry.local:5000/testing/test-image -- To pull the Image from Local Registry

18. docker push <imageName> -- skatta3/mywebapp -- To Push the Image to Docker Hub

•	docker login docker.io
•	docker image tag <imagename> <DockerHub-Username>/<imagename>:latest
•	docker image push <DockerHub-Username>/<tagname>
•	docker pull skatta3/imagename


19. docker push localhost.localdomain:5000/ubuntu  -- To Push into Local Registry

20. docker rm -f $(docker ps -a -q) –-- remove all containers at a time

21. docker rmi <ImageID> --> To remove the Image

22. docker rmi $(docker images -a -q) --> To remove all the images

Docker Compose
Docker-Compose is a service with which you can create multiple containers from multiple images with single command at a time

23. sudo apt install docker-compose -y -- Install docker compose 

24. docker-compose --version

25. docker-compose.yml (yaml)
version: "3"
services:
    web:
      image: nginx
      ports:
        - "80:80"
    database:
      image: redis

26. docker-compose up -d -- To Start all the services from docker-compose.yml file

27. docker-compose up -d --scale database=4  -- To Scale up or down teh services started withing Compose

28 docker-compose down -- It deletes all the containers that are started with docker compose

docker-compose -f docker-volume.yaml up -d -- To specify custom docker-compose file

29. docker stats   -- To list the resource utilization of Docker Containers


Secure Copy - To copy files from your local system to Remote Linux System

scp -i "DevOps.pem" java-tomcat-maven-example.war ubuntu@ec2-3-17-148-120.us-east-2.compute.amazonaws.com:/home/ubuntu











