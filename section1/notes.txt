Docker installation on ubuntu

> sudo apt-get update
> sudo apt-get install ca-certificates curl gnupg
> sudo install -m 0755 -d /etc/apt/keyrings
> curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
> sudo chmod a+r /etc/apt/keyrings/docker.gpg

# Add the repository to Apt sources:
> echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
> sudo apt-get update
> sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin
> sudo usermod -aG docker ubuntu
> newgrp docker

>systemctl status docker

--------------------------------------------------------------------------------------------------------------
=> running our first container:

1.) run a "hello world" container
2.) docker image vs docker container
3.) run a redis container

--> run a hello world
> docker run hello-world
> docker ps -a

> man docker-run
> man docker-ps

--------------------------------------------------------------------------------------------------------------

Docker image vs docker container:

image:

-> the actual package
-> artifact, can be moved around
-> can exist without a container

container:

-> start the application
-> layers of images
-> can not exist without an image

--------------------------------------------------------------------------------------------------------------

Run a redis container:

> docker run redis

--------------------------------------------------------------------------------------------------------------

Essential docker commands:

1.) listing docker images
> docker images
> man docker-images

2.) listing docker containers
> docker ps
> docker ps -a {to view all containers including exited state}
> man docker-ps

3.) searching for docker images
> docker search <apache>
> man docker-search

4.) pulling a docker image
> docker pull httpd:latest
> docker pull httpd:2.4
> man docker-pull

5.) starting and stopping docker containers
> docker start <container name/id>
> docker stop <container name/id>
> man docker-start
> man docker-stop

6.) running a docker container
> docker run redis
> docker run -d redis {-d is for detached mode, means runs in background}
> man docker-run

7.) container port vs host port
-> multiple containers can run on our host machine
-> our host machine has limited number of ports
-> conflict may arise if 2 conatiners try to bind to the same port on our host machine.
> docker run -p 7000:6379 -d redis
> docker run -p 7000:6379 -d redis:6.2.7 {Bind for 0.0.0.0:7000 failed: port is already allocated.}
>  docker run -p 7001:6379 -d redis:6.2.7

8.) removing docker images and containers
> docker image rm -f httpd
> man docker-image-rm 

> docker container rm -f <container name/id> {-f is used for remove forcefully} 
> man docker-container-rm

9.) debugging docker containers
> docker logs <container name/id>
> docker logs objective_pike
> docker run -d --name mydatabase mysql
> docker exec -it <container name/id> /bin/bash
> man docker-logs
> man docker-exec
------------------------------------------------------------------------------------------------------------- 

Running an Apache webserver with docker.

1.) Running an apache container
> docker run -d -p 80:80 --name mywebserver httpd
> docker ps

2.) Connecting to the apache container
> docker exec -it mywebserver /bin/bash

3.) editing the index.html page
> find / iname "index.html" 2> /dev/null

--------------------------------------------------------------------------------------------------------------

Running multi-container applications:

1.) Running a mySQL Database container
2.) Running mySQL and Apache with docker-compose.





